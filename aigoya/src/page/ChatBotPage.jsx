// pages/chatBotPage.jsx
import React, { useState, useRef, useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import styles from '../css/ChatBotPage.module.css';
import { getMyStore } from '../api/StoreApi';

const defaultSuggestions = [
    "Ïò§Îäò Îß§Ï∂ú ÏöîÏïΩ Î≥¥Ïó¨Ï§ò",
    "ÏµúÍ∑º Ïù∏Í∏∞ Î©îÎâ¥ ÏïåÎ†§Ï§ò",
    "Í≤ΩÏüÅÏ†êÍ≥º ÎπÑÍµê Í≤∞Í≥º",
    "Îã§Ïùå Îã¨ Îß§Ï∂ú Ï†ÑÎßù",
    "ÌîºÌÅ¨ ÏãúÍ∞ÑÎåÄ Î∂ÑÏÑù",
    "Ï£ºÏöî Í∞úÏÑ† Ìè¨Ïù∏Ìä∏"
];

const ChatBotPage = () => {
    const location = useLocation();
    const navigate = useNavigate();
    const [messages, setMessages] = useState([]);
    const [input, setInput] = useState("");
    const [isTyping, setIsTyping] = useState(false);
    const [dropdownOpen, setDropdownOpen] = useState(false);
    const [chatSessions, setChatSessions] = useState([]);
    const [currentSessionId, setCurrentSessionId] = useState(null);
    const [storeInfo, setStoreInfo] = useState(null);
    const messageEndRef = useRef(null);

    useEffect(() => {
        // Í∞ÄÍ≤å Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
        const fetchStoreInfo = async () => {
            try {
                const data = await getMyStore();
                setStoreInfo(data);
            } catch (error) {
                console.error('Í∞ÄÍ≤å Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®:', error);
            }
        };
        fetchStoreInfo();

        // ÏÉàÎ°úÏö¥ Ï±ÑÌåÖ ÏÑ∏ÏÖò ÏãúÏûë
        startNewSession();

        // Ï¥àÍ∏∞ Î©îÏãúÏßÄ ÏÑ§Ï†ï
        const initialMessage = location.state?.initialMessage;
        if (initialMessage) {
            setTimeout(() => {
                handleSendMessage(initialMessage);
            }, 100);
        }
    }, [location.state]);

    useEffect(() => {
        messageEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }, [messages, isTyping]);

    const startNewSession = () => {
        const newSessionId = Date.now();
        const newSession = {
            id: newSessionId,
            title: "ÏÉàÎ°úÏö¥ Ï±ÑÌåÖ",
            messages: [{ type: "bot", text: "ÏïàÎÖïÌïòÏÑ∏Ïöî! Îß§Ï∂ú Î∂ÑÏÑù Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏ÏûÖÎãàÎã§. Í∂ÅÍ∏àÌïú Ï†êÏùÑ Î¨ºÏñ¥Î≥¥ÏÑ∏Ïöî." }],
            timestamp: new Date()
        };
        
        setChatSessions(prev => [newSession, ...prev]);
        setCurrentSessionId(newSessionId);
        setMessages(newSession.messages);
    };

    const switchToSession = (sessionId) => {
        const session = chatSessions.find(s => s.id === sessionId);
        if (session) {
            setCurrentSessionId(sessionId);
            setMessages(session.messages);
        }
    };

    const updateCurrentSession = (newMessages) => {
        setChatSessions(prev => prev.map(session => {
            if (session.id === currentSessionId) {
                return {
                    ...session,
                    messages: newMessages,
                    title: newMessages[1]?.text?.substring(0, 30) + "..." || "ÏÉàÎ°úÏö¥ Ï±ÑÌåÖ"
                };
            }
            return session;
        }));
    };

    const sendToAPI = async (msg) => {
        if (!storeInfo?.storeId) {
            setMessages(prev => [...prev, { type: "bot", text: "Í∞ÄÍ≤å Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§. Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî." }]);
            return;
        }

        setIsTyping(true);
        try {
            const response = await fetch('/api/ai/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem("accessToken") || sessionStorage.getItem("accessToken")}`
                },
                body: JSON.stringify({
                    message: msg
                }),
                params: {
                    storeId: storeInfo.storeId
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            const newMessages = [...messages, { type: "bot", text: data.result }];
            setMessages(newMessages);
            updateCurrentSession(newMessages);
        } catch (error) {
            console.error('API Ìò∏Ï∂ú Ïò§Î•ò:', error);
            const errorMessages = [...messages, { type: "bot", text: "Ï£ÑÏÜ°Ìï©ÎãàÎã§. ÏùºÏãúÏ†ÅÏù∏ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî." }];
            setMessages(errorMessages);
            updateCurrentSession(errorMessages);
        } finally {
            setIsTyping(false);
        }
    };

    const handleSendMessage = (message = input) => {
        const trimmed = message.trim();
        if (!trimmed) return;
        
        const newMessages = [...messages, { type: "user", text: trimmed }];
        setMessages(newMessages);
        updateCurrentSession(newMessages);
        setInput("");
        sendToAPI(trimmed);
    };

    const handleSend = () => {
        handleSendMessage();
    };

    const handleKeyDown = (e) => {
        if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault();
            handleSend();
        }
    };

    const handleDropdownSuggestion = (suggestion) => {
        setInput(suggestion);
        setDropdownOpen(false);
    };

    return (
        <div className={styles.container}>
            {/* Ï¢åÏ∏° ÏÇ¨Ïù¥ÎìúÎ∞î - Ï±ÑÌåÖ Í∏∞Î°ù */}
            <div className={styles.sidebar}>
                <div className={styles.sidebarHeader}>
                    <h3>Ï±ÑÌåÖ Í∏∞Î°ù</h3>
                    <button 
                        className={styles.newChatBtn}
                        onClick={startNewSession}
                    >
                        + ÏÉà Ï±ÑÌåÖ
                    </button>
                </div>
                <div className={styles.chatList}>
                    {chatSessions.map(session => (
                        <div
                            key={session.id}
                            className={`${styles.chatItem} ${currentSessionId === session.id ? styles.active : ''}`}
                            onClick={() => switchToSession(session.id)}
                        >
                            <div className={styles.chatTitle}>{session.title}</div>
                            <div className={styles.chatTime}>
                                {session.timestamp.toLocaleTimeString('ko-KR', { 
                                    hour: '2-digit', 
                                    minute: '2-digit' 
                                })}
                            </div>
                        </div>
                    ))}
                </div>
                <div className={styles.homeButton}>
                    <button 
                        className={styles.backToHomeBtn}
                        onClick={() => navigate("/")}
                    >
                        ‚Üê Îß§Ï∂ú Î∂ÑÏÑù ÌôàÏúºÎ°ú
                    </button>
                </div>
            </div>

            {/* Ïö∞Ï∏° Î©îÏù∏ Ï±ÑÌåÖ ÏòÅÏó≠ */}
            <div className={styles.mainChat}>
                <div className={styles.chatHeader}>
                    <div className={styles.aiIcon}>AI</div>
                    <div>
                        <span className={styles.title}>Îß§Ï∂ú Î∂ÑÏÑù Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏</span>
                        <span className={styles.subtitle}>Ïã§ÏãúÍ∞Ñ Î∂ÑÏÑù</span>
                    </div>
                </div>

                <div className={styles.messageArea}>
                    {messages.map((msg, idx) => (
                        <div
                            key={idx}
                            className={msg.type === "user" ? styles.userMessage : styles.botMessage}
                        >
                            <div className={styles.msgInner}>
                                {msg.text}
                            </div>
                        </div>
                    ))}
                    {isTyping && (
                        <div className={styles.botMessage}>
                            <div className={styles.msgInner}>
                                <span className={styles.typingDot}></span>
                                <span className={styles.typingDot}></span>
                                <span className={styles.typingDot}></span>
            </div>
                        </div>
                    )}
                    <div ref={messageEndRef} />
                </div>

                {/* ÏûÖÎ†• ÏòÅÏó≠ */}
                <div className={styles.inputArea}>
                    <div className={styles.dropdownWrapper}>
                        <button
                            className={styles.dropdownBtn}
                            onClick={() => setDropdownOpen(v => !v)}
                        >
                            üí° Ï∂îÏ≤úÏßàÎ¨∏
                        </button>
                        {dropdownOpen && (
                            <div className={styles.dropdown}>
                                {defaultSuggestions.map(sg => (
                                    <div
                                        key={sg}
                                        className={styles.dropdownItem}
                                        onClick={() => handleDropdownSuggestion(sg)}
                                    >
                                        {sg}
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                    <div className={styles.inputWrapper}>
                        <textarea
                            value={input}
                            onChange={e => setInput(e.target.value)}
                            onKeyDown={handleKeyDown}
                            placeholder="ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî..."
                            className={styles.input}
                            rows={1}
                        />
                        <button
                            className={styles.sendButton}
                            onClick={handleSend}
                            disabled={!input.trim() || isTyping}
                        >
                            Ï†ÑÏÜ°
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ChatBotPage;
